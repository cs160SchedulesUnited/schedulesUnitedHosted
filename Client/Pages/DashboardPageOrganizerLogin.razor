@page "/organizerDashboardLogin/"
@using schedulesUnitedHosted.Shared
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager;
@inject DialogService DialogService;

@inject NotificationService NotificationService;


<h3>Login</h3>

<RadzenTemplateForm Data=@("SimpleLogin") Style="width: 50%;">
    <RadzenLogin AllowResetPassword="false" Login="@OnLogin" Register="@OnRegister" />
</RadzenTemplateForm>


@code {

    Utilities util = new Utilities();

    class User
    {

        public string Name { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string RPassword { get; set; }
    }
    User user = new User();


    async Task OnLogin(LoginArgs args)
    {
        try
        {
            schedulesUnitedHosted.Shared.User body = new schedulesUnitedHosted.Shared.User("user", args.Username, args.Password);
            var resp = await Http.PostAsJsonAsync<schedulesUnitedHosted.Shared.User>("user/validate", body);
            var res = await resp.Content.ReadFromJsonAsync<bool>();

            if (res == false)
            {
                var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Failure", Detail = "Incorrect Username and/or Password", Duration = 4000 };
                NotificationService.Notify(message);

                throw new Exception("Incorrect Username & password");
            }
            //Console.WriteLine(res);
            NavigationManager.NavigateTo($"/organizerDashboard/{args.Username}");
        }
        catch (Exception e)
        {
            var resp = e.Message + "\n" + e.StackTrace;
            Console.WriteLine(resp);
        }
    }

    async void OnRegister()
    {
        await DialogService.OpenAsync("Register", ds =>

        //can add any other fields required. if the validator had diff req, there are other available
    @<div>
        <RadzenTemplateForm TItem="User" Data="@user" Submit=RegisterUser>
            <RadzenFieldset Text="Personal information">
                <div style="margin:25px;">
                    <RadzenTextBox @bind-Value="@user.Name" Placeholder="Name" Name="Name" Class="w-100" />
                    <RadzenRequiredValidator Component="Name" Text="Name is required" Popup=true Style="position: absolute" />
                </div>
                <div style="margin:25px;">
                    <RadzenTextBox @bind-Value="@user.Username" Name="Username" Placeholder="Username" Class="w-100" />
                    <RadzenRequiredValidator Component="Username" Text="Username is required" Popup=true Style="position: absolute" />
                </div>
                <div style="margin:25px;">
                    <RadzenPassword @bind-Value="@user.Password" Name="Password" Placeholder="Enter password" Class="w-100" />
                    <RadzenRequiredValidator Component="Password" Text="Password is required" Popup=true Style="position: absolute" />
                </div>
                <div style="margin:25px;">
                    <RadzenPassword @bind-Value="@user.RPassword" Name="RPassword" Placeholder="Confirm password" Class="w-100" />
                    <RadzenRequiredValidator Component="RPassword" Text="Confirm Password is required" Popup=true Style="position: absolute" />
                    <RadzenCompareValidator Value=@user.Password Component="RPassword" Text="Passwords should be the same" Popup=true Style="position: absolute" />
                </div>
                <RadzenButton ButtonType="ButtonType.Submit" Style="margin: 25px;" Text="Submit" />
            </RadzenFieldset>
        </RadzenTemplateForm>
    </div>);

    }

    async Task RegisterUser()
    {
        // validation already done

        //reigster the user
        try
        {
            schedulesUnitedHosted.Shared.User toAdd = new schedulesUnitedHosted.Shared.User(user.Name, user.Username, user.Password);
            var resp = await Http.PostAsJsonAsync<schedulesUnitedHosted.Shared.User>("/create", toAdd);
            var res = await resp.Content.ReadFromJsonAsync<bool>();

            if (res == false)
            {
                var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Failure", Detail = "User already exists", Duration = 4000 };
                NotificationService.Notify(message);

                throw new Exception("User already exists");
            }
            NavigationManager.NavigateTo($"/organizerDashboard/{user.Username}");

            ///Console.WriteLine(resp);
        }
        catch (Exception e)
        {
            var resp = e.Message + "\n" + e.StackTrace;
            Console.WriteLine(resp);
        }

        //go to next page


    }
}
