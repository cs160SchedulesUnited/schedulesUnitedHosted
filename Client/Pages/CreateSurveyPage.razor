@page "/createSurvey/{organizerUserName}"
@using Radzen.Blazor
@inject HttpClient Http;
@inject NavigationManager NavigationManager;
@inject NotificationService NotificationService;


@using schedulesUnitedHosted.Shared

<h1>Create Survey for participants</h1>

<RadzenCard>

    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Name" />
        </div>
        <div class="col-md-8">
            <RadzenTextBox @bind-Value="survey.name" />
        </div>
    </div>
    @*<div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Email" />
            </div>
            <div class="col-md-8">
                <RadzenTextBox @bind-Value="survey.email" Class="w-100" />
            </div>
        </div>*@
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Start Date" />
        </div>
        <div class="col-md-8">
            <RadzenDatePicker @bind-Value='survey.start' Inline="true" DateFormat="d" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="End Date" />
        </div>
        <div class="col-md-8">
            <RadzenDatePicker @bind-Value='survey.end' Inline="true" DateFormat="d" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Response Type" />
        </div>
        <div class="col-md-8">
            <RadzenRadioButtonList @bind-Value='survey.dateType' TValue="int" Orientation="Orientation.Vertical">
                <Items>
                    <RadzenRadioButtonListItem Text="Date" Value="1" />
                    <RadzenRadioButtonListItem Text="Time" Value="2" />
                </Items>
            </RadzenRadioButtonList>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Invitees" />
        </div>
        <div class="col-md-8">
            <RadzenTextArea @bind-Value="value" Placeholder="Separate by comma" Class="w-100" />
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Submit" Click="@Submit" />

        </div>
    </div>
</RadzenCard>


@code {

    [Parameter]
    public string OrganizerUserName { get; set; }


    string value;


    Survey survey = new Survey();

    async void Submit()
    {
        //survey.host = int.Parse(OrganizerID);

        if (survey.end > survey.start)
        {


           
            survey.host = await Http.GetFromJsonAsync<int>($"user/id/{OrganizerUserName}");
            Console.WriteLine(survey.ToString());



            //////////// TEST

            try
            {
                var resp = await Http.PostAsJsonAsync<schedulesUnitedHosted.Shared.Survey>("survey/create", survey);
                //Console.WriteLine(resp);


                Console.WriteLine(resp);

                survey.id = await Http.GetFromJsonAsync<int>($"survey/{survey.name}/{survey.host}");



                ////TEST
                ///
                List<string> inviteeIDs = value.Replace(" ", "").Split(',').ToList();

                foreach (string inviteeID in inviteeIDs)
                {
                    //should be post
                    Console.WriteLine(inviteeID);
                    //var exists = await Http.GetFromJsonAsync<User>($"user/info/{inviteeID}");
                    //Console.WriteLine(exists);
                    Console.WriteLine("invite");
                    var respInvite = await Http.PostAsJsonAsync<int>($"survey/invite/{inviteeID}", survey.id);
                    Console.WriteLine(respInvite);
                }

                var user = await Http.GetFromJsonAsync<User>($"user/info/{OrganizerUserName}");
                NavigationManager.NavigateTo($"/organizerDashboard/{user.accountID}");


            }
            catch (Exception ex)
            {
                var resp = ex.Message + "\n" + ex.StackTrace;
                Console.WriteLine(resp);
            }
        }
        else
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Failure", Detail = "End survey date must be after start date", Duration = 4000 };
            NotificationService.Notify(message);
        }

    }


}
