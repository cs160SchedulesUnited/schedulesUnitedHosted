@page "/responsePage/{partID}/{survey}"
@using Radzen.Blazor
@using System.Linq;
@using schedulesUnitedHosted.Shared;
@inject HttpClient Http;
@inject Radzen.DialogService dialogService;




<RadzenCard Style="margin: 0px; height: 90vh;">

    <RadzenScheduler Data="@appointments" SlotRender="@OnSlotRender" @ref=@scheduler Style="height: 900px; width: 100%; margin: 0px;" TItem="Appointment" StartProperty="Start" SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect EndProperty="End" TextProperty="Text">
        <RadzenMonthView />
    </RadzenScheduler>
    <RadzenButton Click=OnClick Text="Submit" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />


</RadzenCard>


@code {

        [Parameter] public int survey { get; set; }
        [Parameter] public string partID { get; set; }

    public Survey surveyFull = new Survey();
    RadzenScheduler<Appointment> scheduler;

    class Appointment
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
    }
    IList<Appointment> appointments = new List<Appointment>();


    protected override void OnInitialized()
    {
    }

    public async Task OnClick()
    {

        foreach (Appointment appointment in appointments)
        {

            try
            {
                var participantInfo = await Http.GetFromJsonAsync<User>($"user/{partID}");
                surveyFull = await Http.GetFromJsonAsync<Survey>($"survey/{survey}");
                Response r = new Response(participantInfo.accountID, surveyFull.id, appointment.Start, 0);
                var respUser = await Http.PostAsJsonAsync<Response>($"survey/respond", r);
            }
            catch (Exception ex)
            {

            }
        }

    }
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // DOESNT WORK PLS FIX
        @*if (args.Start < surveyFull.start || args.Start > surveyFull.end)
        {
            args.Attributes["style"] = "background: DarkGray";
        }*@
    }


    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //DOESNT WORK PLS FIX
        @*if (args.Start >= surveyFull.start && args.Start <= surveyFull.end)
        {*@


            @*if (appointments.Any(a => a.Start != args.Start))
            {*@
                appointments.Add(new Appointment { Start = args.Start, End = args.End, Text = "Busy" });

            //}
        @*}*@
        await scheduler.Reload();

    }


    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        Appointment app = appointments.Where(p => p.Start.Equals(args.Start) && p.End.Equals(args.End) && p.Start.Equals(args.Start)).FirstOrDefault();

        appointments.RemoveAt(appointments.IndexOf(app));

        await scheduler.Reload();
    }
}
