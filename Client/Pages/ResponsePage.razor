@page "/responsePage"
@using Radzen.Blazor
@using System.Linq;

<h3>Response Page</h3>

<RadzenScheduler Data="@appointments" @ref=@scheduler Style="height: 700px" TItem="Appointment" StartProperty="Start" SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect EndProperty="End" TextProperty="Text">
    <RadzenMonthView />
</RadzenScheduler>
@code {


    RadzenScheduler<Appointment> scheduler;

    class Appointment
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
    }

    IList<Appointment> appointments = new List<Appointment>
{
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };
    @*DataItem[] data = new DataItem[]
        {
          new DataItem
          {
            Start = DateTime.Today,
            End = DateTime.Today.AddDays(1),
            Text = "Birthday"
          },
        };*@


    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //Console.WriteLine($"SlotSelect: Start={args.Start} End={args.End}");

        // Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
        //    new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });


        // ADD THE APPOINTMENT VIEW. NO NEED TO CALL ABOVE METHOD. CAN JUST CALL 'data.Add(timeSlot)' AND THEN RELOAD



        appointments.Add(new Appointment { Start = args.Start, End = args.End, Text = "New Event" });
        await scheduler.Reload();
        //if (data != null)
        //{
        //  appointments.Add(data);
        // Either call the Reload method or reassign the Data property of the Scheduler
        //   await scheduler.Reload();
        //}

    }


    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        @*console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

            await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

            await scheduler.Reload();*@
        //Appointment app = new Appointment { Start = args.Start, End = args.End, Text=args.Data.Text };

        Appointment app = appointments.Where(p => p.Start.Equals(args.Start) && p.End.Equals(args.End) && p.Start.Equals(args.Start)).FirstOrDefault();

        appointments.RemoveAt(appointments.IndexOf(app));

        await scheduler.Reload();
    }
}
