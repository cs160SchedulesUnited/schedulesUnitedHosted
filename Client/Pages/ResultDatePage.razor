@page "/resultDate/{survey}"
@using Radzen.Blazor
@inject HttpClient Http;
@using schedulesUnitedHosted.Shared;


@inject Radzen.DialogService DialogService;

<h3>Component1</h3>

<RadzenScheduler Data="@appointments" Context="" Style="height: 700px; padding-bottom: 30px;" TItem="Response" TextProperty="text" AppointmentRender=@OnAppointmentRender StartProperty="Availability" AppointmentSelect=@OnAppointmentSelect EndProperty="Availability">
    <RadzenMonthView />
</RadzenScheduler>
<div style="width: 100%;">
    <RadzenCard Style="float: left; width: 50%; height: 100%;">
        <h4>Responded</h4>
        <RadzenListBox Data=@respondedList TValue="string" Style="max-height: 200px;" />
    </RadzenCard>
    <RadzenCard Style=" width: 50%; height: 100%;">
        <h4>Not Yet Responded</h4>
        <RadzenListBox Data=@notRespondedList TValue="string" Style="max-height: 200px;" />
    </RadzenCard>
</div>

@code {
    [Parameter] public Survey survey { get; set; }

    class Appointment
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
    }

    IList<Response> appointments = new List<Response>();

    IList<Appointment> appointmentss = new List<Appointment>
{
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };
    //NOT ALLOWED TO HAVE DUPLICATE VALUES IN RESPONDED AND NON RESPONDED LIST
    IEnumerable<string> notRespondedList = new List<string> { "Person 4", "Person 5", "Person 6", };
    IEnumerable<string> respondedList = new List<string> { "Person 1", "Person 2", "Person 3" };

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Response> args)
    {

        args.Attributes["style"] = "background: rgba(201, 76, 76, 0.3)";

    }


    async protected override void OnInitialized()
    {
        try
        {
            //Console.WriteLine("getting id");
            appointments = await Http.GetFromJsonAsync<List<Response>>($"/responses/{survey.id}");

            // calc best days








        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message + "\n" + ex.StackTrace);
        }

    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Response> args)
    {

        var responses = await Http.GetFromJsonAsync<List<Response>>($"/responses/{survey.id}/{args.Start.ToString("yyyy-MM-dd")}");
        IList<string> names = new List<string>();

        foreach (Response response in responses)
        {
            //get names of user from id of each


            //for now
            names.Add(response.AccId.ToString());
        }

        var result = await DialogService.OpenAsync("Simple Dialog", ds =>
            @<div>
                <RadzenCard Style=" width: 50%; height: 100%;">
                    <p>Responded</p>
                    <RadzenListBox TValue="string" Data=@names Style="max-height: 100px;" />
                </RadzenCard>
            </div>);

}


}
